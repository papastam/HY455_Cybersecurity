import csv
import mysql.connector

def import_from_explotdb(conn):

    # CSV file details
    csv_file = '/opt/exploitdb/files_exploits.csv'

    # Establish database connection
    cursor = conn.cursor()

    # Drop the table if it exists
    drop_table_query = '''
        DROP TABLE IF EXISTS exploits
    '''
    cursor.execute(drop_table_query)
    conn.commit()

    # Create table if it doesn't exist
    create_table_query = '''
        CREATE TABLE exploits (
            db_key INT AUTO_INCREMENT PRIMARY KEY,
            exploit_id TEXT,
            file TEXT,
            description TEXT,
            date_published DATE,
            author TEXT,
            exploit_type TEXT,
            platform TEXT,
            port TEXT,
            date_added DATE,
            date_updated DATE,
            verified BOOLEAN,
            codes TEXT,
            tags TEXT,
            aliases TEXT,
            screenshot_url TEXT,
            application_url TEXT,
            source_url TEXT
        )
    '''
    cursor.execute(create_table_query)
    conn.commit()

    # Open and read the CSV file
    try:
        file = open(csv_file, 'r')
    except FileNotFoundError:
        print(f'File {csv_file} not found.')

    count = 0
    failed = 0

    # Read the CSV file
    csv_reader = csv.DictReader(file)
    for row in csv_reader:
        try:
            # Extract values from the CSV row
            exploit_values = (
                row['id'],
                row['file'],
                row['description'],
                row['date_published'],
                row['author'],
                row['type'],
                row['platform'],
                row['port'],
                row['date_added'],
                row['date_updated'] if row['date_updated'] != '' else None,
                row['verified'],
                row['codes'],
                row['tags'],
                row['aliases'],
                row['screenshot_url'],
                row['application_url'],
                row['source_url']
            )

            # Insert the row into the database
            insert_query = '''
                INSERT INTO exploits (
                    exploit_id, file, description, date_published, author, exploit_type,
                    platform, port, date_added, date_updated, verified, codes,
                    tags, aliases, screenshot_url, application_url, source_url
                )
                VALUES (
                    %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
                )
            '''
            cursor.execute(insert_query, exploit_values)
            conn.commit()
            print(f"\033[32mInserted #\033[00m\033[42m{row['id']}\033[00m\033[32m into the database.\033[00m")
            count += 1
        except Exception as e:
            print(f"\033[31mFailed to insert #\033[00m\033[41m{row['id']}\033[00m\033[31m into the database.\033[00m")
            print(e)
            failed += 1

    print(f"\033[34mInserted \033[00m\033[36m{count}\033[00m\033[34m rows into the database.\033[00m")

    if failed > 0:
        print(f"\033[34mFailed to insert \033[00m\033[31m{failed}\033[00m\033[34m rows into the database.\033[00m")
    else:
        print(f"\033[34mFailed to insert \033[00m\033[36m{failed}\033[00m\033[34m rows into the database.\033[00m")

    # Close the database connection
    cursor.close()
